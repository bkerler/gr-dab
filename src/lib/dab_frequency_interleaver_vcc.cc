/* -*- c++ -*- */
/*
 * Copyright 2004 Free Software Foundation, Inc.
 * 
 * This file is part of GNU Radio
 * 
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 * 
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

/*
 * config.h is generated by configure.  It contains the results
 * of probing for features, options etc.  It should be the first
 * file included in your .cc file.
 */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <dab_frequency_interleaver_vcc.h>
#include <gnuradio/io_signature.h>

/*
 * Create a new instance of dab_frequency_interleaver_vcc and return
 * a boost shared_ptr.  This is effectively the public constructor.
 */
dab_frequency_interleaver_vcc_sptr 
dab_make_frequency_interleaver_vcc (const std::vector<short> &interleaving_sequence)
{
  return gnuradio::get_initial_sptr (new dab_frequency_interleaver_vcc (interleaving_sequence));
}

dab_frequency_interleaver_vcc::dab_frequency_interleaver_vcc (const std::vector<short> &interleaving_sequence) : 
  gr::sync_block ("frequency_interleaver_vcc",
             gr::io_signature::make (1, 1, sizeof(gr_complex)*interleaving_sequence.size()),
             gr::io_signature::make (1, 1, sizeof(gr_complex)*interleaving_sequence.size())),
  d_interleaving_sequence(interleaving_sequence), d_length(interleaving_sequence.size())
{
  for (unsigned int i=0; i<d_length; i++) 
    assert(d_interleaving_sequence[i]<(short)d_length);
}


int 
dab_frequency_interleaver_vcc::work (int noutput_items,
                        gr_vector_const_void_star &input_items,
                        gr_vector_void_star &output_items)
{
  gr_complex const *in = (const gr_complex *) input_items[0];
  gr_complex *out = (gr_complex *) output_items[0];

  for (int i = 0; i < noutput_items; i++) {
    for (unsigned int j = 0; j < d_length; j++) 
      out[d_interleaving_sequence[j]] = in[j];
    out += d_length;
    in  += d_length;
  }
    
  return noutput_items;
}


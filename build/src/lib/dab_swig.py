# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_dab_swig', [dirname(__file__)])
        except ImportError:
            import _dab_swig
            return _dab_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_dab_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _dab_swig = swig_import_helper()
    del swig_import_helper
else:
    import _dab_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
  """high_res_timer_now() -> gr::high_res_timer_type"""
  return _dab_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
  """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
  return _dab_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
  """high_res_timer_tps() -> gr::high_res_timer_type"""
  return _dab_swig.high_res_timer_tps()

def high_res_timer_epoch():
  """high_res_timer_epoch() -> gr::high_res_timer_type"""
  return _dab_swig.high_res_timer_epoch()
class dab_moving_sum_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(dab_moving_sum_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(dab_moving_sum_ff)> self) -> dab_moving_sum_ff_sptr
        __init__(boost::shared_ptr<(dab_moving_sum_ff)> self, dab_moving_sum_ff * p) -> dab_moving_sum_ff_sptr
        """
        this = _dab_swig.new_dab_moving_sum_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(dab_moving_sum_ff_sptr self) -> dab_moving_sum_ff *"""
        return _dab_swig.dab_moving_sum_ff_sptr___deref__(self)

    __swig_destroy__ = _dab_swig.delete_dab_moving_sum_ff_sptr
    __del__ = lambda self : None;
    def length(self):
        """
        length(dab_moving_sum_ff_sptr self) -> int

        Return the number of elements in v.
        """
        return _dab_swig.dab_moving_sum_ff_sptr_length(self)

    def reset(self):
        """reset(dab_moving_sum_ff_sptr self)"""
        return _dab_swig.dab_moving_sum_ff_sptr_reset(self)

dab_moving_sum_ff_sptr_swigregister = _dab_swig.dab_moving_sum_ff_sptr_swigregister
dab_moving_sum_ff_sptr_swigregister(dab_moving_sum_ff_sptr)

dab_moving_sum_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def moving_sum_ff(*args, **kwargs):
  """moving_sum_ff(int length) -> dab_moving_sum_ff_sptr"""
  return _dab_swig.moving_sum_ff(*args, **kwargs)
class dab_moving_sum_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(dab_moving_sum_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(dab_moving_sum_cc)> self) -> dab_moving_sum_cc_sptr
        __init__(boost::shared_ptr<(dab_moving_sum_cc)> self, dab_moving_sum_cc * p) -> dab_moving_sum_cc_sptr
        """
        this = _dab_swig.new_dab_moving_sum_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(dab_moving_sum_cc_sptr self) -> dab_moving_sum_cc *"""
        return _dab_swig.dab_moving_sum_cc_sptr___deref__(self)

    __swig_destroy__ = _dab_swig.delete_dab_moving_sum_cc_sptr
    __del__ = lambda self : None;
    def length(self):
        """
        length(dab_moving_sum_cc_sptr self) -> int

        Return the number of elements in v.
        """
        return _dab_swig.dab_moving_sum_cc_sptr_length(self)

    def reset(self):
        """reset(dab_moving_sum_cc_sptr self)"""
        return _dab_swig.dab_moving_sum_cc_sptr_reset(self)

dab_moving_sum_cc_sptr_swigregister = _dab_swig.dab_moving_sum_cc_sptr_swigregister
dab_moving_sum_cc_sptr_swigregister(dab_moving_sum_cc_sptr)

dab_moving_sum_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def moving_sum_cc(*args, **kwargs):
  """moving_sum_cc(int length) -> dab_moving_sum_cc_sptr"""
  return _dab_swig.moving_sum_cc(*args, **kwargs)
class dab_ofdm_sampler_sptr(object):
    """Proxy of C++ boost::shared_ptr<(dab_ofdm_sampler)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(dab_ofdm_sampler)> self) -> dab_ofdm_sampler_sptr
        __init__(boost::shared_ptr<(dab_ofdm_sampler)> self, dab_ofdm_sampler * p) -> dab_ofdm_sampler_sptr
        """
        this = _dab_swig.new_dab_ofdm_sampler_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(dab_ofdm_sampler_sptr self) -> dab_ofdm_sampler *"""
        return _dab_swig.dab_ofdm_sampler_sptr___deref__(self)

    __swig_destroy__ = _dab_swig.delete_dab_ofdm_sampler_sptr
    __del__ = lambda self : None;
dab_ofdm_sampler_sptr_swigregister = _dab_swig.dab_ofdm_sampler_sptr_swigregister
dab_ofdm_sampler_sptr_swigregister(dab_ofdm_sampler_sptr)

dab_ofdm_sampler_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def ofdm_sampler(*args, **kwargs):
  """
    ofdm_sampler(unsigned int fft_length, unsigned int cp_length, unsigned int symbols_per_frame, 
        unsigned int gap) -> dab_ofdm_sampler_sptr
    """
  return _dab_swig.ofdm_sampler(*args, **kwargs)
class dab_ofdm_coarse_frequency_correct_sptr(object):
    """Proxy of C++ boost::shared_ptr<(dab_ofdm_coarse_frequency_correct)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(dab_ofdm_coarse_frequency_correct)> self) -> dab_ofdm_coarse_frequency_correct_sptr
        __init__(boost::shared_ptr<(dab_ofdm_coarse_frequency_correct)> self, dab_ofdm_coarse_frequency_correct * p) -> dab_ofdm_coarse_frequency_correct_sptr
        """
        this = _dab_swig.new_dab_ofdm_coarse_frequency_correct_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(dab_ofdm_coarse_frequency_correct_sptr self) -> dab_ofdm_coarse_frequency_correct *"""
        return _dab_swig.dab_ofdm_coarse_frequency_correct_sptr___deref__(self)

    __swig_destroy__ = _dab_swig.delete_dab_ofdm_coarse_frequency_correct_sptr
    __del__ = lambda self : None;
dab_ofdm_coarse_frequency_correct_sptr_swigregister = _dab_swig.dab_ofdm_coarse_frequency_correct_sptr_swigregister
dab_ofdm_coarse_frequency_correct_sptr_swigregister(dab_ofdm_coarse_frequency_correct_sptr)

dab_ofdm_coarse_frequency_correct_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def ofdm_coarse_frequency_correct(*args, **kwargs):
  """ofdm_coarse_frequency_correct(unsigned int fft_length, unsigned int num_carriers, unsigned int cp_length) -> dab_ofdm_coarse_frequency_correct_sptr"""
  return _dab_swig.ofdm_coarse_frequency_correct(*args, **kwargs)
class dab_diff_phasor_vcc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(dab_diff_phasor_vcc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(dab_diff_phasor_vcc)> self) -> dab_diff_phasor_vcc_sptr
        __init__(boost::shared_ptr<(dab_diff_phasor_vcc)> self, dab_diff_phasor_vcc * p) -> dab_diff_phasor_vcc_sptr
        """
        this = _dab_swig.new_dab_diff_phasor_vcc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(dab_diff_phasor_vcc_sptr self) -> dab_diff_phasor_vcc *"""
        return _dab_swig.dab_diff_phasor_vcc_sptr___deref__(self)

    __swig_destroy__ = _dab_swig.delete_dab_diff_phasor_vcc_sptr
    __del__ = lambda self : None;
dab_diff_phasor_vcc_sptr_swigregister = _dab_swig.dab_diff_phasor_vcc_sptr_swigregister
dab_diff_phasor_vcc_sptr_swigregister(dab_diff_phasor_vcc_sptr)

dab_diff_phasor_vcc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def diff_phasor_vcc(*args, **kwargs):
  """diff_phasor_vcc(unsigned int length) -> dab_diff_phasor_vcc_sptr"""
  return _dab_swig.diff_phasor_vcc(*args, **kwargs)
class dab_correct_individual_phase_offset_vff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(dab_correct_individual_phase_offset_vff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(dab_correct_individual_phase_offset_vff)> self) -> dab_correct_individual_phase_offset_vff_sptr
        __init__(boost::shared_ptr<(dab_correct_individual_phase_offset_vff)> self, dab_correct_individual_phase_offset_vff * p) -> dab_correct_individual_phase_offset_vff_sptr
        """
        this = _dab_swig.new_dab_correct_individual_phase_offset_vff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(dab_correct_individual_phase_offset_vff_sptr self) -> dab_correct_individual_phase_offset_vff *"""
        return _dab_swig.dab_correct_individual_phase_offset_vff_sptr___deref__(self)

    __swig_destroy__ = _dab_swig.delete_dab_correct_individual_phase_offset_vff_sptr
    __del__ = lambda self : None;
dab_correct_individual_phase_offset_vff_sptr_swigregister = _dab_swig.dab_correct_individual_phase_offset_vff_sptr_swigregister
dab_correct_individual_phase_offset_vff_sptr_swigregister(dab_correct_individual_phase_offset_vff_sptr)

dab_correct_individual_phase_offset_vff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def correct_individual_phase_offset_vff(*args, **kwargs):
  """correct_individual_phase_offset_vff(unsigned int vlen, float alpha) -> dab_correct_individual_phase_offset_vff_sptr"""
  return _dab_swig.correct_individual_phase_offset_vff(*args, **kwargs)
class dab_ofdm_remove_first_symbol_vcc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(dab_ofdm_remove_first_symbol_vcc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(dab_ofdm_remove_first_symbol_vcc)> self) -> dab_ofdm_remove_first_symbol_vcc_sptr
        __init__(boost::shared_ptr<(dab_ofdm_remove_first_symbol_vcc)> self, dab_ofdm_remove_first_symbol_vcc * p) -> dab_ofdm_remove_first_symbol_vcc_sptr
        """
        this = _dab_swig.new_dab_ofdm_remove_first_symbol_vcc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(dab_ofdm_remove_first_symbol_vcc_sptr self) -> dab_ofdm_remove_first_symbol_vcc *"""
        return _dab_swig.dab_ofdm_remove_first_symbol_vcc_sptr___deref__(self)

    __swig_destroy__ = _dab_swig.delete_dab_ofdm_remove_first_symbol_vcc_sptr
    __del__ = lambda self : None;
dab_ofdm_remove_first_symbol_vcc_sptr_swigregister = _dab_swig.dab_ofdm_remove_first_symbol_vcc_sptr_swigregister
dab_ofdm_remove_first_symbol_vcc_sptr_swigregister(dab_ofdm_remove_first_symbol_vcc_sptr)

dab_ofdm_remove_first_symbol_vcc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def ofdm_remove_first_symbol_vcc(*args, **kwargs):
  """ofdm_remove_first_symbol_vcc(unsigned int vlen) -> dab_ofdm_remove_first_symbol_vcc_sptr"""
  return _dab_swig.ofdm_remove_first_symbol_vcc(*args, **kwargs)
class dab_estimate_sample_rate_bf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(dab_estimate_sample_rate_bf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(dab_estimate_sample_rate_bf)> self) -> dab_estimate_sample_rate_bf_sptr
        __init__(boost::shared_ptr<(dab_estimate_sample_rate_bf)> self, dab_estimate_sample_rate_bf * p) -> dab_estimate_sample_rate_bf_sptr
        """
        this = _dab_swig.new_dab_estimate_sample_rate_bf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(dab_estimate_sample_rate_bf_sptr self) -> dab_estimate_sample_rate_bf *"""
        return _dab_swig.dab_estimate_sample_rate_bf_sptr___deref__(self)

    __swig_destroy__ = _dab_swig.delete_dab_estimate_sample_rate_bf_sptr
    __del__ = lambda self : None;
dab_estimate_sample_rate_bf_sptr_swigregister = _dab_swig.dab_estimate_sample_rate_bf_sptr_swigregister
dab_estimate_sample_rate_bf_sptr_swigregister(dab_estimate_sample_rate_bf_sptr)

dab_estimate_sample_rate_bf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def estimate_sample_rate_bf(*args, **kwargs):
  """estimate_sample_rate_bf(float expected_sample_rate, int frame_length) -> dab_estimate_sample_rate_bf_sptr"""
  return _dab_swig.estimate_sample_rate_bf(*args, **kwargs)
class dab_ofdm_ffs_sample_sptr(object):
    """Proxy of C++ boost::shared_ptr<(dab_ofdm_ffs_sample)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(dab_ofdm_ffs_sample)> self) -> dab_ofdm_ffs_sample_sptr
        __init__(boost::shared_ptr<(dab_ofdm_ffs_sample)> self, dab_ofdm_ffs_sample * p) -> dab_ofdm_ffs_sample_sptr
        """
        this = _dab_swig.new_dab_ofdm_ffs_sample_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(dab_ofdm_ffs_sample_sptr self) -> dab_ofdm_ffs_sample *"""
        return _dab_swig.dab_ofdm_ffs_sample_sptr___deref__(self)

    __swig_destroy__ = _dab_swig.delete_dab_ofdm_ffs_sample_sptr
    __del__ = lambda self : None;
    def ffe_estimate(self):
        """ffe_estimate(dab_ofdm_ffs_sample_sptr self) -> float"""
        return _dab_swig.dab_ofdm_ffs_sample_sptr_ffe_estimate(self)

dab_ofdm_ffs_sample_sptr_swigregister = _dab_swig.dab_ofdm_ffs_sample_sptr_swigregister
dab_ofdm_ffs_sample_sptr_swigregister(dab_ofdm_ffs_sample_sptr)

dab_ofdm_ffs_sample_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def ofdm_ffs_sample(*args, **kwargs):
  """
    ofdm_ffs_sample(unsigned int symbol_length, unsigned int fft_length, unsigned int num_symbols, float alpha, 
        unsigned int sample_rate) -> dab_ofdm_ffs_sample_sptr
    """
  return _dab_swig.ofdm_ffs_sample(*args, **kwargs)
class dab_ofdm_ffe_all_in_one_sptr(object):
    """Proxy of C++ boost::shared_ptr<(dab_ofdm_ffe_all_in_one)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(dab_ofdm_ffe_all_in_one)> self) -> dab_ofdm_ffe_all_in_one_sptr
        __init__(boost::shared_ptr<(dab_ofdm_ffe_all_in_one)> self, dab_ofdm_ffe_all_in_one * p) -> dab_ofdm_ffe_all_in_one_sptr
        """
        this = _dab_swig.new_dab_ofdm_ffe_all_in_one_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(dab_ofdm_ffe_all_in_one_sptr self) -> dab_ofdm_ffe_all_in_one *"""
        return _dab_swig.dab_ofdm_ffe_all_in_one_sptr___deref__(self)

    __swig_destroy__ = _dab_swig.delete_dab_ofdm_ffe_all_in_one_sptr
    __del__ = lambda self : None;
    def ffe_estimate(self):
        """ffe_estimate(dab_ofdm_ffe_all_in_one_sptr self) -> float"""
        return _dab_swig.dab_ofdm_ffe_all_in_one_sptr_ffe_estimate(self)

dab_ofdm_ffe_all_in_one_sptr_swigregister = _dab_swig.dab_ofdm_ffe_all_in_one_sptr_swigregister
dab_ofdm_ffe_all_in_one_sptr_swigregister(dab_ofdm_ffe_all_in_one_sptr)

dab_ofdm_ffe_all_in_one_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def ofdm_ffe_all_in_one(*args, **kwargs):
  """
    ofdm_ffe_all_in_one(unsigned int symbol_length, unsigned int fft_length, unsigned int num_symbols, float alpha, 
        unsigned int sample_rate) -> dab_ofdm_ffe_all_in_one_sptr
    """
  return _dab_swig.ofdm_ffe_all_in_one(*args, **kwargs)
class dab_fractional_interpolator_triggered_update_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(dab_fractional_interpolator_triggered_update_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(dab_fractional_interpolator_triggered_update_cc)> self) -> dab_fractional_interpolator_triggered_update_cc_sptr
        __init__(boost::shared_ptr<(dab_fractional_interpolator_triggered_update_cc)> self, dab_fractional_interpolator_triggered_update_cc * p) -> dab_fractional_interpolator_triggered_update_cc_sptr
        """
        this = _dab_swig.new_dab_fractional_interpolator_triggered_update_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(dab_fractional_interpolator_triggered_update_cc_sptr self) -> dab_fractional_interpolator_triggered_update_cc *"""
        return _dab_swig.dab_fractional_interpolator_triggered_update_cc_sptr___deref__(self)

    __swig_destroy__ = _dab_swig.delete_dab_fractional_interpolator_triggered_update_cc_sptr
    __del__ = lambda self : None;
    def mu(self):
        """mu(dab_fractional_interpolator_triggered_update_cc_sptr self) -> float"""
        return _dab_swig.dab_fractional_interpolator_triggered_update_cc_sptr_mu(self)

    def interp_ratio(self):
        """interp_ratio(dab_fractional_interpolator_triggered_update_cc_sptr self) -> float"""
        return _dab_swig.dab_fractional_interpolator_triggered_update_cc_sptr_interp_ratio(self)

    def set_mu(self, *args, **kwargs):
        """set_mu(dab_fractional_interpolator_triggered_update_cc_sptr self, float mu)"""
        return _dab_swig.dab_fractional_interpolator_triggered_update_cc_sptr_set_mu(self, *args, **kwargs)

    def set_interp_ratio(self, *args, **kwargs):
        """set_interp_ratio(dab_fractional_interpolator_triggered_update_cc_sptr self, float interp_ratio)"""
        return _dab_swig.dab_fractional_interpolator_triggered_update_cc_sptr_set_interp_ratio(self, *args, **kwargs)

dab_fractional_interpolator_triggered_update_cc_sptr_swigregister = _dab_swig.dab_fractional_interpolator_triggered_update_cc_sptr_swigregister
dab_fractional_interpolator_triggered_update_cc_sptr_swigregister(dab_fractional_interpolator_triggered_update_cc_sptr)

dab_fractional_interpolator_triggered_update_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def fractional_interpolator_triggered_update_cc(*args, **kwargs):
  """fractional_interpolator_triggered_update_cc(float phase_shift, float interp_ratio) -> dab_fractional_interpolator_triggered_update_cc_sptr"""
  return _dab_swig.fractional_interpolator_triggered_update_cc(*args, **kwargs)
class dab_frequency_interleaver_vcc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(dab_frequency_interleaver_vcc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(dab_frequency_interleaver_vcc)> self) -> dab_frequency_interleaver_vcc_sptr
        __init__(boost::shared_ptr<(dab_frequency_interleaver_vcc)> self, dab_frequency_interleaver_vcc * p) -> dab_frequency_interleaver_vcc_sptr
        """
        this = _dab_swig.new_dab_frequency_interleaver_vcc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(dab_frequency_interleaver_vcc_sptr self) -> dab_frequency_interleaver_vcc *"""
        return _dab_swig.dab_frequency_interleaver_vcc_sptr___deref__(self)

    __swig_destroy__ = _dab_swig.delete_dab_frequency_interleaver_vcc_sptr
    __del__ = lambda self : None;
    def set_sequence(self, *args, **kwargs):
        """set_sequence(dab_frequency_interleaver_vcc_sptr self, std::vector< short,std::allocator< short > > const & interleaving_sequence)"""
        return _dab_swig.dab_frequency_interleaver_vcc_sptr_set_sequence(self, *args, **kwargs)

dab_frequency_interleaver_vcc_sptr_swigregister = _dab_swig.dab_frequency_interleaver_vcc_sptr_swigregister
dab_frequency_interleaver_vcc_sptr_swigregister(dab_frequency_interleaver_vcc_sptr)

dab_frequency_interleaver_vcc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def frequency_interleaver_vcc(*args, **kwargs):
  """frequency_interleaver_vcc(std::vector< short,std::allocator< short > > const & interleaving_sequence) -> dab_frequency_interleaver_vcc_sptr"""
  return _dab_swig.frequency_interleaver_vcc(*args, **kwargs)
class dab_qpsk_mapper_vbc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(dab_qpsk_mapper_vbc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(dab_qpsk_mapper_vbc)> self) -> dab_qpsk_mapper_vbc_sptr
        __init__(boost::shared_ptr<(dab_qpsk_mapper_vbc)> self, dab_qpsk_mapper_vbc * p) -> dab_qpsk_mapper_vbc_sptr
        """
        this = _dab_swig.new_dab_qpsk_mapper_vbc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(dab_qpsk_mapper_vbc_sptr self) -> dab_qpsk_mapper_vbc *"""
        return _dab_swig.dab_qpsk_mapper_vbc_sptr___deref__(self)

    __swig_destroy__ = _dab_swig.delete_dab_qpsk_mapper_vbc_sptr
    __del__ = lambda self : None;
dab_qpsk_mapper_vbc_sptr_swigregister = _dab_swig.dab_qpsk_mapper_vbc_sptr_swigregister
dab_qpsk_mapper_vbc_sptr_swigregister(dab_qpsk_mapper_vbc_sptr)

dab_qpsk_mapper_vbc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def qpsk_mapper_vbc(*args, **kwargs):
  """qpsk_mapper_vbc(int symbol_length) -> dab_qpsk_mapper_vbc_sptr"""
  return _dab_swig.qpsk_mapper_vbc(*args, **kwargs)
class dab_qpsk_demapper_vcb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(dab_qpsk_demapper_vcb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(dab_qpsk_demapper_vcb)> self) -> dab_qpsk_demapper_vcb_sptr
        __init__(boost::shared_ptr<(dab_qpsk_demapper_vcb)> self, dab_qpsk_demapper_vcb * p) -> dab_qpsk_demapper_vcb_sptr
        """
        this = _dab_swig.new_dab_qpsk_demapper_vcb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(dab_qpsk_demapper_vcb_sptr self) -> dab_qpsk_demapper_vcb *"""
        return _dab_swig.dab_qpsk_demapper_vcb_sptr___deref__(self)

    __swig_destroy__ = _dab_swig.delete_dab_qpsk_demapper_vcb_sptr
    __del__ = lambda self : None;
dab_qpsk_demapper_vcb_sptr_swigregister = _dab_swig.dab_qpsk_demapper_vcb_sptr_swigregister
dab_qpsk_demapper_vcb_sptr_swigregister(dab_qpsk_demapper_vcb_sptr)

dab_qpsk_demapper_vcb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def qpsk_demapper_vcb(*args, **kwargs):
  """qpsk_demapper_vcb(int symbol_length) -> dab_qpsk_demapper_vcb_sptr"""
  return _dab_swig.qpsk_demapper_vcb(*args, **kwargs)
class dab_ofdm_insert_pilot_vcc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(dab_ofdm_insert_pilot_vcc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(dab_ofdm_insert_pilot_vcc)> self) -> dab_ofdm_insert_pilot_vcc_sptr
        __init__(boost::shared_ptr<(dab_ofdm_insert_pilot_vcc)> self, dab_ofdm_insert_pilot_vcc * p) -> dab_ofdm_insert_pilot_vcc_sptr
        """
        this = _dab_swig.new_dab_ofdm_insert_pilot_vcc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(dab_ofdm_insert_pilot_vcc_sptr self) -> dab_ofdm_insert_pilot_vcc *"""
        return _dab_swig.dab_ofdm_insert_pilot_vcc_sptr___deref__(self)

    __swig_destroy__ = _dab_swig.delete_dab_ofdm_insert_pilot_vcc_sptr
    __del__ = lambda self : None;
dab_ofdm_insert_pilot_vcc_sptr_swigregister = _dab_swig.dab_ofdm_insert_pilot_vcc_sptr_swigregister
dab_ofdm_insert_pilot_vcc_sptr_swigregister(dab_ofdm_insert_pilot_vcc_sptr)

dab_ofdm_insert_pilot_vcc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def ofdm_insert_pilot_vcc(*args, **kwargs):
  """ofdm_insert_pilot_vcc(pmt_vector_cfloat pilot) -> dab_ofdm_insert_pilot_vcc_sptr"""
  return _dab_swig.ofdm_insert_pilot_vcc(*args, **kwargs)
class dab_sum_phasor_trig_vcc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(dab_sum_phasor_trig_vcc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(dab_sum_phasor_trig_vcc)> self) -> dab_sum_phasor_trig_vcc_sptr
        __init__(boost::shared_ptr<(dab_sum_phasor_trig_vcc)> self, dab_sum_phasor_trig_vcc * p) -> dab_sum_phasor_trig_vcc_sptr
        """
        this = _dab_swig.new_dab_sum_phasor_trig_vcc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(dab_sum_phasor_trig_vcc_sptr self) -> dab_sum_phasor_trig_vcc *"""
        return _dab_swig.dab_sum_phasor_trig_vcc_sptr___deref__(self)

    __swig_destroy__ = _dab_swig.delete_dab_sum_phasor_trig_vcc_sptr
    __del__ = lambda self : None;
dab_sum_phasor_trig_vcc_sptr_swigregister = _dab_swig.dab_sum_phasor_trig_vcc_sptr_swigregister
dab_sum_phasor_trig_vcc_sptr_swigregister(dab_sum_phasor_trig_vcc_sptr)

dab_sum_phasor_trig_vcc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def sum_phasor_trig_vcc(*args, **kwargs):
  """sum_phasor_trig_vcc(unsigned int length) -> dab_sum_phasor_trig_vcc_sptr"""
  return _dab_swig.sum_phasor_trig_vcc(*args, **kwargs)
class dab_ofdm_move_and_insert_zero_sptr(object):
    """Proxy of C++ boost::shared_ptr<(dab_ofdm_move_and_insert_zero)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(dab_ofdm_move_and_insert_zero)> self) -> dab_ofdm_move_and_insert_zero_sptr
        __init__(boost::shared_ptr<(dab_ofdm_move_and_insert_zero)> self, dab_ofdm_move_and_insert_zero * p) -> dab_ofdm_move_and_insert_zero_sptr
        """
        this = _dab_swig.new_dab_ofdm_move_and_insert_zero_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(dab_ofdm_move_and_insert_zero_sptr self) -> dab_ofdm_move_and_insert_zero *"""
        return _dab_swig.dab_ofdm_move_and_insert_zero_sptr___deref__(self)

    __swig_destroy__ = _dab_swig.delete_dab_ofdm_move_and_insert_zero_sptr
    __del__ = lambda self : None;
dab_ofdm_move_and_insert_zero_sptr_swigregister = _dab_swig.dab_ofdm_move_and_insert_zero_sptr_swigregister
dab_ofdm_move_and_insert_zero_sptr_swigregister(dab_ofdm_move_and_insert_zero_sptr)

dab_ofdm_move_and_insert_zero_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def ofdm_move_and_insert_zero(*args, **kwargs):
  """ofdm_move_and_insert_zero(unsigned int fft_length, unsigned int num_carriers) -> dab_ofdm_move_and_insert_zero_sptr"""
  return _dab_swig.ofdm_move_and_insert_zero(*args, **kwargs)
class dab_insert_null_symbol_sptr(object):
    """Proxy of C++ boost::shared_ptr<(dab_insert_null_symbol)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(dab_insert_null_symbol)> self) -> dab_insert_null_symbol_sptr
        __init__(boost::shared_ptr<(dab_insert_null_symbol)> self, dab_insert_null_symbol * p) -> dab_insert_null_symbol_sptr
        """
        this = _dab_swig.new_dab_insert_null_symbol_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(dab_insert_null_symbol_sptr self) -> dab_insert_null_symbol *"""
        return _dab_swig.dab_insert_null_symbol_sptr___deref__(self)

    __swig_destroy__ = _dab_swig.delete_dab_insert_null_symbol_sptr
    __del__ = lambda self : None;
dab_insert_null_symbol_sptr_swigregister = _dab_swig.dab_insert_null_symbol_sptr_swigregister
dab_insert_null_symbol_sptr_swigregister(dab_insert_null_symbol_sptr)

dab_insert_null_symbol_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def insert_null_symbol(*args, **kwargs):
  """insert_null_symbol(int ns_length, int symbol_length) -> dab_insert_null_symbol_sptr"""
  return _dab_swig.insert_null_symbol(*args, **kwargs)
class dab_concatenate_signals_sptr(object):
    """Proxy of C++ boost::shared_ptr<(dab_concatenate_signals)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(dab_concatenate_signals)> self) -> dab_concatenate_signals_sptr
        __init__(boost::shared_ptr<(dab_concatenate_signals)> self, dab_concatenate_signals * p) -> dab_concatenate_signals_sptr
        """
        this = _dab_swig.new_dab_concatenate_signals_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(dab_concatenate_signals_sptr self) -> dab_concatenate_signals *"""
        return _dab_swig.dab_concatenate_signals_sptr___deref__(self)

    __swig_destroy__ = _dab_swig.delete_dab_concatenate_signals_sptr
    __del__ = lambda self : None;
    def reset(self):
        """reset(dab_concatenate_signals_sptr self)"""
        return _dab_swig.dab_concatenate_signals_sptr_reset(self)

dab_concatenate_signals_sptr_swigregister = _dab_swig.dab_concatenate_signals_sptr_swigregister
dab_concatenate_signals_sptr_swigregister(dab_concatenate_signals_sptr)

dab_concatenate_signals_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def concatenate_signals(*args, **kwargs):
  """concatenate_signals(size_t itemsize) -> dab_concatenate_signals_sptr"""
  return _dab_swig.concatenate_signals(*args, **kwargs)
class dab_measure_processing_rate_sptr(object):
    """Proxy of C++ boost::shared_ptr<(dab_measure_processing_rate)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(dab_measure_processing_rate)> self) -> dab_measure_processing_rate_sptr
        __init__(boost::shared_ptr<(dab_measure_processing_rate)> self, dab_measure_processing_rate * p) -> dab_measure_processing_rate_sptr
        """
        this = _dab_swig.new_dab_measure_processing_rate_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(dab_measure_processing_rate_sptr self) -> dab_measure_processing_rate *"""
        return _dab_swig.dab_measure_processing_rate_sptr___deref__(self)

    __swig_destroy__ = _dab_swig.delete_dab_measure_processing_rate_sptr
    __del__ = lambda self : None;
    def set_samples_to_count(self, *args, **kwargs):
        """set_samples_to_count(dab_measure_processing_rate_sptr self, int samples_to_count)"""
        return _dab_swig.dab_measure_processing_rate_sptr_set_samples_to_count(self, *args, **kwargs)

    def processing_rate(self):
        """processing_rate(dab_measure_processing_rate_sptr self) -> float"""
        return _dab_swig.dab_measure_processing_rate_sptr_processing_rate(self)

    def bitrate(self):
        """bitrate(dab_measure_processing_rate_sptr self) -> float"""
        return _dab_swig.dab_measure_processing_rate_sptr_bitrate(self)

dab_measure_processing_rate_sptr_swigregister = _dab_swig.dab_measure_processing_rate_sptr_swigregister
dab_measure_processing_rate_sptr_swigregister(dab_measure_processing_rate_sptr)

dab_measure_processing_rate_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def measure_processing_rate(*args, **kwargs):
  """measure_processing_rate(size_t itemsize, int samples_to_count) -> dab_measure_processing_rate_sptr"""
  return _dab_swig.measure_processing_rate(*args, **kwargs)
class dab_sum_elements_vff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(dab_sum_elements_vff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(dab_sum_elements_vff)> self) -> dab_sum_elements_vff_sptr
        __init__(boost::shared_ptr<(dab_sum_elements_vff)> self, dab_sum_elements_vff * p) -> dab_sum_elements_vff_sptr
        """
        this = _dab_swig.new_dab_sum_elements_vff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(dab_sum_elements_vff_sptr self) -> dab_sum_elements_vff *"""
        return _dab_swig.dab_sum_elements_vff_sptr___deref__(self)

    __swig_destroy__ = _dab_swig.delete_dab_sum_elements_vff_sptr
    __del__ = lambda self : None;
dab_sum_elements_vff_sptr_swigregister = _dab_swig.dab_sum_elements_vff_sptr_swigregister
dab_sum_elements_vff_sptr_swigregister(dab_sum_elements_vff_sptr)

dab_sum_elements_vff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def sum_elements_vff(*args, **kwargs):
  """sum_elements_vff(unsigned int length) -> dab_sum_elements_vff_sptr"""
  return _dab_swig.sum_elements_vff(*args, **kwargs)
class dab_modulo_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(dab_modulo_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(dab_modulo_ff)> self) -> dab_modulo_ff_sptr
        __init__(boost::shared_ptr<(dab_modulo_ff)> self, dab_modulo_ff * p) -> dab_modulo_ff_sptr
        """
        this = _dab_swig.new_dab_modulo_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(dab_modulo_ff_sptr self) -> dab_modulo_ff *"""
        return _dab_swig.dab_modulo_ff_sptr___deref__(self)

    __swig_destroy__ = _dab_swig.delete_dab_modulo_ff_sptr
    __del__ = lambda self : None;
dab_modulo_ff_sptr_swigregister = _dab_swig.dab_modulo_ff_sptr_swigregister
dab_modulo_ff_sptr_swigregister(dab_modulo_ff_sptr)

dab_modulo_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def modulo_ff(*args, **kwargs):
  """modulo_ff(float div) -> dab_modulo_ff_sptr"""
  return _dab_swig.modulo_ff(*args, **kwargs)
class dab_measure_ber_b_sptr(object):
    """Proxy of C++ boost::shared_ptr<(dab_measure_ber_b)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(dab_measure_ber_b)> self) -> dab_measure_ber_b_sptr
        __init__(boost::shared_ptr<(dab_measure_ber_b)> self, dab_measure_ber_b * p) -> dab_measure_ber_b_sptr
        """
        this = _dab_swig.new_dab_measure_ber_b_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(dab_measure_ber_b_sptr self) -> dab_measure_ber_b *"""
        return _dab_swig.dab_measure_ber_b_sptr___deref__(self)

    __swig_destroy__ = _dab_swig.delete_dab_measure_ber_b_sptr
    __del__ = lambda self : None;
    def clear(self):
        """clear(dab_measure_ber_b_sptr self)"""
        return _dab_swig.dab_measure_ber_b_sptr_clear(self)

    def ber(self):
        """ber(dab_measure_ber_b_sptr self) -> float"""
        return _dab_swig.dab_measure_ber_b_sptr_ber(self)

    def bytecount(self):
        """bytecount(dab_measure_ber_b_sptr self) -> unsigned int"""
        return _dab_swig.dab_measure_ber_b_sptr_bytecount(self)

    def bitcount(self):
        """bitcount(dab_measure_ber_b_sptr self) -> unsigned int"""
        return _dab_swig.dab_measure_ber_b_sptr_bitcount(self)

    def errorcount(self):
        """errorcount(dab_measure_ber_b_sptr self) -> unsigned int"""
        return _dab_swig.dab_measure_ber_b_sptr_errorcount(self)

dab_measure_ber_b_sptr_swigregister = _dab_swig.dab_measure_ber_b_sptr_swigregister
dab_measure_ber_b_sptr_swigregister(dab_measure_ber_b_sptr)

dab_measure_ber_b_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def measure_ber_b():
  """measure_ber_b() -> dab_measure_ber_b_sptr"""
  return _dab_swig.measure_ber_b()
class dab_select_vectors_sptr(object):
    """Proxy of C++ boost::shared_ptr<(dab_select_vectors)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(dab_select_vectors)> self) -> dab_select_vectors_sptr
        __init__(boost::shared_ptr<(dab_select_vectors)> self, dab_select_vectors * p) -> dab_select_vectors_sptr
        """
        this = _dab_swig.new_dab_select_vectors_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(dab_select_vectors_sptr self) -> dab_select_vectors *"""
        return _dab_swig.dab_select_vectors_sptr___deref__(self)

    __swig_destroy__ = _dab_swig.delete_dab_select_vectors_sptr
    __del__ = lambda self : None;
dab_select_vectors_sptr_swigregister = _dab_swig.dab_select_vectors_sptr_swigregister
dab_select_vectors_sptr_swigregister(dab_select_vectors_sptr)

dab_select_vectors_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def select_vectors(*args, **kwargs):
  """select_vectors(size_t itemsize, unsigned int length, unsigned int num_select, unsigned int num_skip) -> dab_select_vectors_sptr"""
  return _dab_swig.select_vectors(*args, **kwargs)
class dab_repartition_vectors_sptr(object):
    """Proxy of C++ boost::shared_ptr<(dab_repartition_vectors)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(dab_repartition_vectors)> self) -> dab_repartition_vectors_sptr
        __init__(boost::shared_ptr<(dab_repartition_vectors)> self, dab_repartition_vectors * p) -> dab_repartition_vectors_sptr
        """
        this = _dab_swig.new_dab_repartition_vectors_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(dab_repartition_vectors_sptr self) -> dab_repartition_vectors *"""
        return _dab_swig.dab_repartition_vectors_sptr___deref__(self)

    __swig_destroy__ = _dab_swig.delete_dab_repartition_vectors_sptr
    __del__ = lambda self : None;
dab_repartition_vectors_sptr_swigregister = _dab_swig.dab_repartition_vectors_sptr_swigregister
dab_repartition_vectors_sptr_swigregister(dab_repartition_vectors_sptr)

dab_repartition_vectors_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def repartition_vectors(*args, **kwargs):
  """
    repartition_vectors(size_t d_itemsize, unsigned int vlen_in, unsigned int vlen_out, unsigned int multiply, 
        unsigned int divide) -> dab_repartition_vectors_sptr
    """
  return _dab_swig.repartition_vectors(*args, **kwargs)
class dab_puncture_vbb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(dab_puncture_vbb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(dab_puncture_vbb)> self) -> dab_puncture_vbb_sptr
        __init__(boost::shared_ptr<(dab_puncture_vbb)> self, dab_puncture_vbb * p) -> dab_puncture_vbb_sptr
        """
        this = _dab_swig.new_dab_puncture_vbb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(dab_puncture_vbb_sptr self) -> dab_puncture_vbb *"""
        return _dab_swig.dab_puncture_vbb_sptr___deref__(self)

    __swig_destroy__ = _dab_swig.delete_dab_puncture_vbb_sptr
    __del__ = lambda self : None;
dab_puncture_vbb_sptr_swigregister = _dab_swig.dab_puncture_vbb_sptr_swigregister
dab_puncture_vbb_sptr_swigregister(dab_puncture_vbb_sptr)

dab_puncture_vbb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def puncture_vbb(*args, **kwargs):
  """puncture_vbb(std::vector< unsigned char,std::allocator< unsigned char > > const & puncturing_vector) -> dab_puncture_vbb_sptr"""
  return _dab_swig.puncture_vbb(*args, **kwargs)
class dab_unpuncture_vff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(dab_unpuncture_vff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(dab_unpuncture_vff)> self) -> dab_unpuncture_vff_sptr
        __init__(boost::shared_ptr<(dab_unpuncture_vff)> self, dab_unpuncture_vff * p) -> dab_unpuncture_vff_sptr
        """
        this = _dab_swig.new_dab_unpuncture_vff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(dab_unpuncture_vff_sptr self) -> dab_unpuncture_vff *"""
        return _dab_swig.dab_unpuncture_vff_sptr___deref__(self)

    __swig_destroy__ = _dab_swig.delete_dab_unpuncture_vff_sptr
    __del__ = lambda self : None;
dab_unpuncture_vff_sptr_swigregister = _dab_swig.dab_unpuncture_vff_sptr_swigregister
dab_unpuncture_vff_sptr_swigregister(dab_unpuncture_vff_sptr)

dab_unpuncture_vff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def unpuncture_vff(*args, **kwargs):
  """
    unpuncture_vff(std::vector< unsigned char,std::allocator< unsigned char > > const & puncturing_vector, 
        float fillval=0) -> dab_unpuncture_vff_sptr
    """
  return _dab_swig.unpuncture_vff(*args, **kwargs)
class dab_magnitude_equalizer_vcc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(dab_magnitude_equalizer_vcc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(dab_magnitude_equalizer_vcc)> self) -> dab_magnitude_equalizer_vcc_sptr
        __init__(boost::shared_ptr<(dab_magnitude_equalizer_vcc)> self, dab_magnitude_equalizer_vcc * p) -> dab_magnitude_equalizer_vcc_sptr
        """
        this = _dab_swig.new_dab_magnitude_equalizer_vcc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(dab_magnitude_equalizer_vcc_sptr self) -> dab_magnitude_equalizer_vcc *"""
        return _dab_swig.dab_magnitude_equalizer_vcc_sptr___deref__(self)

    __swig_destroy__ = _dab_swig.delete_dab_magnitude_equalizer_vcc_sptr
    __del__ = lambda self : None;
dab_magnitude_equalizer_vcc_sptr_swigregister = _dab_swig.dab_magnitude_equalizer_vcc_sptr_swigregister
dab_magnitude_equalizer_vcc_sptr_swigregister(dab_magnitude_equalizer_vcc_sptr)

dab_magnitude_equalizer_vcc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def magnitude_equalizer_vcc(*args, **kwargs):
  """magnitude_equalizer_vcc(unsigned int vlen, unsigned int num_symbols) -> dab_magnitude_equalizer_vcc_sptr"""
  return _dab_swig.magnitude_equalizer_vcc(*args, **kwargs)
class dab_complex_to_interleaved_float_vcf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(dab_complex_to_interleaved_float_vcf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(dab_complex_to_interleaved_float_vcf)> self) -> dab_complex_to_interleaved_float_vcf_sptr
        __init__(boost::shared_ptr<(dab_complex_to_interleaved_float_vcf)> self, dab_complex_to_interleaved_float_vcf * p) -> dab_complex_to_interleaved_float_vcf_sptr
        """
        this = _dab_swig.new_dab_complex_to_interleaved_float_vcf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(dab_complex_to_interleaved_float_vcf_sptr self) -> dab_complex_to_interleaved_float_vcf *"""
        return _dab_swig.dab_complex_to_interleaved_float_vcf_sptr___deref__(self)

    __swig_destroy__ = _dab_swig.delete_dab_complex_to_interleaved_float_vcf_sptr
    __del__ = lambda self : None;
dab_complex_to_interleaved_float_vcf_sptr_swigregister = _dab_swig.dab_complex_to_interleaved_float_vcf_sptr_swigregister
dab_complex_to_interleaved_float_vcf_sptr_swigregister(dab_complex_to_interleaved_float_vcf_sptr)

dab_complex_to_interleaved_float_vcf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def complex_to_interleaved_float_vcf(*args, **kwargs):
  """complex_to_interleaved_float_vcf(unsigned int length) -> dab_complex_to_interleaved_float_vcf_sptr"""
  return _dab_swig.complex_to_interleaved_float_vcf(*args, **kwargs)
class dab_prune_vectors_sptr(object):
    """Proxy of C++ boost::shared_ptr<(dab_prune_vectors)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(dab_prune_vectors)> self) -> dab_prune_vectors_sptr
        __init__(boost::shared_ptr<(dab_prune_vectors)> self, dab_prune_vectors * p) -> dab_prune_vectors_sptr
        """
        this = _dab_swig.new_dab_prune_vectors_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(dab_prune_vectors_sptr self) -> dab_prune_vectors *"""
        return _dab_swig.dab_prune_vectors_sptr___deref__(self)

    __swig_destroy__ = _dab_swig.delete_dab_prune_vectors_sptr
    __del__ = lambda self : None;
dab_prune_vectors_sptr_swigregister = _dab_swig.dab_prune_vectors_sptr_swigregister
dab_prune_vectors_sptr_swigregister(dab_prune_vectors_sptr)

dab_prune_vectors_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def prune_vectors(*args, **kwargs):
  """prune_vectors(size_t itemsize, unsigned int length, unsigned int prune_start, unsigned int prune_end) -> dab_prune_vectors_sptr"""
  return _dab_swig.prune_vectors(*args, **kwargs)
class dab_fib_sink_vb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(dab_fib_sink_vb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(dab_fib_sink_vb)> self) -> dab_fib_sink_vb_sptr
        __init__(boost::shared_ptr<(dab_fib_sink_vb)> self, dab_fib_sink_vb * p) -> dab_fib_sink_vb_sptr
        """
        this = _dab_swig.new_dab_fib_sink_vb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(dab_fib_sink_vb_sptr self) -> dab_fib_sink_vb *"""
        return _dab_swig.dab_fib_sink_vb_sptr___deref__(self)

    __swig_destroy__ = _dab_swig.delete_dab_fib_sink_vb_sptr
    __del__ = lambda self : None;
dab_fib_sink_vb_sptr_swigregister = _dab_swig.dab_fib_sink_vb_sptr_swigregister
dab_fib_sink_vb_sptr_swigregister(dab_fib_sink_vb_sptr)

dab_fib_sink_vb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def fib_sink_vb():
  """fib_sink_vb() -> dab_fib_sink_vb_sptr"""
  return _dab_swig.fib_sink_vb()


